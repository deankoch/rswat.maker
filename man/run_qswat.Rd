% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_qswat.R
\name{run_qswat}
\alias{run_qswat}
\title{Run QSWAT+ with default settings to create a SWAT+ project for the catchment}
\usage{
run_qswat(
  data_dir,
  overwrite = FALSE,
  name = basename(data_dir),
  osgeo_dir = NULL,
  lake_threshold = 50L,
  min_ncell = 16L,
  channel_threshold = 0.001,
  stream_threshold = 0.01,
  snap_threshold = 300L,
  do_test = FALSE,
  dem_path = NULL,
  outlet_path = NULL,
  nudge_clear = TRUE,
  nudge_dist = NULL,
  nudge_nmax = 5,
  nudge_plot = TRUE,
  nudge_nm = "outlet_moved"
)
}
\arguments{
\item{data_dir}{character, path to the directory for input/output files}

\item{overwrite}{logical, whether to write the output or just return the file paths}

\item{name}{character, name of the sub-directory to use for project files}

\item{osgeo_dir}{character, path to the QGIS 3 installation directory (AKA "OSGEO4W_ROOT")}

\item{lake_threshold}{integer > 0, the percent overlap for a cell to become (part of) a lake}

\item{min_ncell}{integer > 0, minimum number of cells to define a channel drainage}

\item{channel_threshold}{numeric > 0, channel creation threshold as fraction of basin area}

\item{stream_threshold}{numeric > 0, stream creation threshold as fraction of basin area}

\item{snap_threshold}{integer > 0, maximum distance (metres) to snap outlets to flow lines}

\item{do_test}{logical, if \code{TRUE} the function appends '_test' to \code{name} (see details)}

\item{dem_path}{character, path to DEM to use as input (instead of default in \code{data_dir})}

\item{outlet_path}{character, path to outlets to use as input (instead of default in \code{data_dir})}

\item{nudge_dist}{numeric > 0 or NULL (for default pixel width), distance to reposition points}

\item{nudge_nmax}{integer, the maximum number of iterations of nudging allowed}

\item{nudge_nm}{character, sub-directory name for the nudged outlet file(s)}
}
\value{
list of paths related to the created QSWAT+ project
}
\description{
This executes a minimal QSWAT+ workflow (delineation, HRUs, etc) using the input files
created by \code{save_qswat}. This is Windows-only and has some external dependencies (see Details).
Note that when \code{overwrite=TRUE}, the function first deletes all existing files in the output
QGIS project sub-directory \code{name}.
}
\details{
Output is written to the "qswat" directory of \code{data_dir}. A list of input paths and
parameters can be found in "qswatplus_input.json". This file parametrizes a Python script
that runs the QSWAT+ workflow: A project tree for QSWAT+ is written to sub-directory
\code{name}, then SWAT+ Editor is called to populate the "TxtInOut" directory with SWAT+
configuration files.

When setup is finished, a set of important output paths are stored in the file
"qswatplus_output.json". The function returns its contents in a list:
\itemize{
\item dir: path to the project directory (\code{name})
\item sql: path to the project SQLite database file (needed by SWAT+ Editor)
\item txt: path to the project "TxtInOut" directory (configuration files for SWAT+ simulator)
\item channel: path to the project channels shape file
\item stream: path to the project streams shape file
\item outlet: path to the project outlets shape file (after snapping)
\item lake: path to the project lakes shape file
\item hru, hru_full: paths to the project HRUs shape files
\item lsu, lsu_full: paths to the project LSUs shape files
\item editor_exe: path to the SWAT+ Editor executable (needed for creating the files in "TxtInOut")
\item simulator_dir: directory containing SWAT+ executable (runs the model defined in "TxtInOut")
}

The function uses \code{shell(intern=TRUE)} run QSWAT+ and captures stdout in the file
"qswatplus_log.txt". Errors are detected by scanning this log file after the \code{shell} call,
and communicated to the user as warnings by default (or as errors, when \code{do_test=TRUE}).

After QSWAT+ setup is finished the function runs \code{check_qswat} to identify delineation
issues and attempts to fix them automatically by re-positioning outlets and calling
\code{run_qswat} again. This is repeated until the check is passed or \code{nudge_nmax} iterations
is reached (set to \code{0} to disable checking).

The re-positioned outlet shape files from all iterations are stored in the sub-directory
"qswat/nudge_outlet" of \code{data_dir} and the "qswatplus_input.json" file is always updated
to point to the one currently in use. The default \code{nudge_clear=TRUE} deletes this directory
at the beginning of the function call to avoid a build-up of old garbage.

When \code{do_test=TRUE}, the function also appends '_test' to \code{name} before running QSWAT+.
The prompts QSWAT+ to run some internal consistency checks that are helpful for catching
delineation or snapping issues. These checks can produce false positives so they are
disabled by default. Note however that the checks will happen whenever a QSWAT+ project
\code{name} contains the string "test".

Before calling this function you will need to install QGIS 3.32.0 and the latest SWAT+
bundle, including QSWAT+ and SWAT+ Editor. You will also need to set \code{osgeo_dir} to point
to your QGIS installation directory. By default this is set to 'C:/Program Files/QGIS 3.32.0',
which should be the correct path for many (but not all) Windows users. Unfortunately I don't
know an easy way to discover this path automatically from within R.

The function calls a Windows batch file that launches Python3 for QGIS3 and runs the
script 'run_qswatplus.py'. This script uses the QSWAT+ plugin to complete the essential
SWAT+ model creation steps, including: delineation with TauDEM, loading soils and land use
to define HRUs using "Dominant HRU" method, and creating a database to link everything.
A system call to the SWAT+ Editor CLI produces plaintext SWAT+ config files in "TxtInOut".
}
