% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{comid_up}
\alias{comid_up}
\title{Return a vector of all upstream COMID values}
\usage{
comid_up(
  comid,
  edge,
  first_only = FALSE,
  from = "FROMCOMID",
  to = "TOCOMID",
  headwater = "0"
)
}
\arguments{
\item{comid}{character vector, the key value to start from}

\item{edge}{data frame, the NHD "PlusFlow" table (see \code{?get_upstream}) or similar}

\item{first_only}{logical, whether to return only the first level of upstream COMID(s)}
}
\value{
character vector, the COMID values for polygons draining to (one of) \code{comid}
}
\description{
By default this uses 'FROMCOMID' and 'TOCOMID' fields in the \code{edge} table to
follow the directed graph of flow lines upstream from key value \code{comid}. All flow
lines are assumed to terminate at \code{to=headwater}, which for NHD data uses the
character key '0'.
}
\details{
This was originally written for COMID fields in NHD tables returned by \code{nhdR}, but
it should work with any similarly structured data frame. Set \code{from} and \code{to} to
used to specify different columns to follow (eg DSLINK fields from TauDEM output
returned by QSWAT+), making sure that \code{headwater} is set properly. Keys can be
integer or character.

If \code{first_only=TRUE} the function returns only the key(s) found immediately
upstream (if any). Otherwise the function exhaustively checks all relevant branches in
a loop, returning all unique upstream keys in a vector.

All entries of \code{comid} should be found in \code{edge[['from']]}. Normal usage
is to pass a single value to \code{comid} identifying your outlet of interest. However,
you can pass vectors to \code{comid} to get results for all of the inputs, concatenated
in a single vector with duplicates removed.
}
\examples{
# dummy table - these are not real COMIDs!
edge_eg = data.frame(
 FROMCOMID=c('00', '00', '10', '11', '20'),
 TOCOMID=c('10', '11', '20', '20', '30'))

# follow from downstream of fork to get all nodes
comid_up('30', edge_eg)

# follow from one side of fork then the other
comid_up('10', edge_eg)
comid_up('11', edge_eg)
}
