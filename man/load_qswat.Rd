% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_qswat.R
\name{load_qswat}
\alias{load_qswat}
\title{Load shape files from a QSWAT+ project}
\usage{
load_qswat(data_dir, what = "all", sub = FALSE, quiet = FALSE)
}
\arguments{
\item{data_dir}{character path to parent of "qswat" subdirectory}

\item{what}{character, either 'all' (default) the name of the element to return}

\item{sub}{logical if \code{TRUE} the function loops over sub-catchments in "split"}

\item{quiet}{logical if \code{TRUE} a warning is suppressed}
}
\value{
either of 'sub', 'channel', 'outlet', 'log' or all of them in a list
}
\description{
This loads the channels, sub-basins, and outlets shape-files created
during QSWAT+ setup and returns them as sf geometry data frames, in a list
along with a character vector of standard output from the \code{shell} call to QSWAT+.
}
\details{
This is meant for projects created using \code{run_qswat}; The function expects an
input JSON file in the "qswat" directory (parent of the QGIS project directory)
which it uses to find the correct input DEM path. The output JSON in this directory
(if found) is used to locate the output  QSWAT+ "Shapes" directory. If QSWAT+
completes delineation but halts afterwards (eg due to failed checks or database
issues), the function will attempt load the shape files anyway by guessing their
path in the \code{data_dir} directory tree.

The function returns only the subset of sub-basin polygons with positive 'Subbasin'
keys, and the channels mapping to them. The returned outlets have coordinates snapped
to channels already (by QSWAT+).

Change \code{what} from its default 'all' to one of the output element names to return
only that element (unlisted).  Set \code{sub=TRUE} to load results from all sub-catchments
(subdirectories of "split") in a loop and return the results in a list. If \code{what} is
not 'all', the function column-binds the result, adding a key to identify the
sub-catchment and project. The path to the project associated with the geometry can
later be constructed using \code{file.path(data_dir, 'split', split_dir)}
}
